# Chapter 03. 애플리케이션 설계

**모듈 개념** 

**모듈 특징** - 독립성 높을수록 , 모듈의 결합도 낮게, 응집도 높게 , 모듈의 크기는 작게   

**공통 모듈 개념 :** 

**공통 모듈 원칙(정명완일추)**

- 정확성
- 명확성
- 완전성
- 일관성
- 추적성

**모듈화 개념**

**모듈화 기법**

| 루틴(Routine) | 소프트웨어에서 특정 동작을 수행하는 일련의 코드로 기능을 가진  |
| --- | --- |
| 메인루틴 |  |
| 서브루틴 |  |

**바람직한 모듈 설계 방안 -중요** 

- 결합도 낮추고 응집도 높인다.
- 모듈의 복잡도와 중복성을 줄이고 일관성을 유지한다.
- 모듈의 기능은 예측이 가능해야 하며, 지나치게 제한적이어서는 안 된다.
- 적당한 모듈의 크기를 유지한다. (Mccabe)
- 모듈 간의 효과적인
- 유지 보수가 용이해야 하고 이식성을 고려해야 한다.

**모듈 개수 및 비용 간 상관관계** 

**모듈화 유형** 

| 응집도 |  |
| --- | --- |
| 결합도 |  |

**팬인/팬아웃**

F : 팬인 2개들어오는것   팬 아웃 1개 나가는것  

---

**공통 모듈 설계** 

**설계 모델링 개념** 

**설계 모델링 원칙**

- 구조화
- 하나의 함수 안에
- 모듈 단위
- 계층적 구조

**설계 모듈링 유형**

- 구조모델링
- 

**소프트웨어 설계 유형 - 중요** 

- 자료구조 설계
- 아키텍쳐 설계
- 인터페이스 설계

**소프트웨어 설계 유형 - 중요** 

- 프로지서 설계
- 협약에 의한 설계   -중요

**협약에 의한 설계** - 중요

- 선행 조건
- 결과 조건
- 불변 조건

**소프트웨어 설계 원리 -중요**

- 하향식(모듈)
- 상향식(자아인프)
- 상위, 하위

| 상향식 설계 |  |
| --- | --- |
| 하향식 설계 |  |

코드 설계 개념 

**코드의 기능**

| 표준화 |  |
| --- | --- |
| 분류 |  |
| 식별 |  |
| 배열 |  |
| 간소화 |  |
| 연상 |  |
| 암호화 |  |
| 오류검출 |  |

**코드 설계 종류**

| 연상 코드 |  |
| --- | --- |
| 블록 코드 |  |
| 순차 코드 |  |
| 표의 숫자 코드 |  |
| 십진 코드 |  |
| 그룹 분류식 코드 |  |

**코드 오류 종류** 

| 사본 오류(Transcrip) |  |
| --- | --- |
| 전위 오류 |  |
| 생략 오류(Omission Error) |  |
| 첨가 오류 (Addition Error) |  |
| 이중 전위 오류 |  |

**HIPO 개념**

시스템의 분석 및 설계나 문서화할 때 사용되며, 하향식 소프트웨어 개발을 위한 문서화 도구

**HIPO 특징**

- 체계적인 문서 관리가 가능하다.
- 기호, 도표 등을 사용해서 보기가 쉽고 이해도 쉽다
- 기능과 자료의 의존관계를 동시에 표현할 수 있다.
- 변경, 유지보수가 용이하다.
- HIPO 차트

HIPO 차트 종류

| 가시적 도표 |  |
| --- | --- |
| 총체적 도표 |  |
| 세부적 도표 |  |

---

**소프트웨어 아키텍쳐 개념**

**소프트웨어 아키텍처 프레임워크 개념**

**소프트웨어 아키텍처 4+1 뷰 개념**

**소프트웨어 아키텍처 4+1 뷰 구성요소 (유논프구배)**

- 유스케이스 뷰
- 논리 뷰
- 프로세스 뷰
- 구현 뷰
- 배포 뷰 (=배치 뷰)

**소프트웨어 아키텍처 비용 평가 모델 개념**

**아키텍처 비용 평가 모델 종류 (SACAA)**

- SAAM : 변경 용이성과 기능성에 집중, 평가가 용이하여 경험이 없는 조직에서도 활용 가능
- ATAM :
- CBAM : 경제적 의사결정에 대한 요구를 충조
- ADR
- ARID

**소프트웨어 아키텍처 패턴 개념**

소프트웨어를 설계할 때 참조할 수 있는 전형적인 해결 방식

**소프트웨어 아키텍처 패턴 유형**

- 계층화 패턴
- 클라이언트 - 서버 패턴
- 파이프 - 필터 패턴
- 브로커 패턴
- MVC 패턴
- 마스터-슬레이브 패턴 예) 실기간 시스템

**소프트웨어 아키텍처 품질 속성**

| 시스템 품질 속성(가변성 보사시 ) | 가용성, 변경 용이성, 성능, 보안성, 사용 편의성, 시험 용이성 |
| --- | --- |
| 비지니스 품질 속성 |  |
| 아키텍처 품질 속성 |  |

---

**객체 지향 개념**

실세계의 개체를 속성과 메서드가 결합한 형태의 객체로 표현하는 기법

**객체지향 구성요소(클객메메인속)**

- 클래스
- 객체
- 메소드
- 메시지
- 인스턴스
- 속성

**객체지향 기법(캡상다 추정관)**

- 캡슐화
- 상속성
- 다형성
- 추상화
- 정보은닉
- 관계성

**관계성(집분연일특)**

| 연관화 관계 | is-member-of관계 |
| --- | --- |
| 집단화 관계 |  |
| 분류화 관계 |  |
| 일반화 관계 |  |
| 특수화 관계 |  |

**객체지향 설계 원칙(SOLID) - 중요**

- 단일 책임의 원칙(single)
- 개방폐쇄의 원칙(open)
- 리스코프 치환의 원칙(Liskov)
- 인터페이스 분리의 원칙(Interface)
- 의존성 역전의 원칙(Dependency) ****

객체지향 방법론 종류 

| OOSE(야콥슨) |  |
| --- | --- |
| OMT(럼바우) | 객동기 -객체모델링(Object Modeling) , 동적모델링, 기능 모델링 |
| OOD(부치) |  |

COad와 Yourdon 방법

Wirfs-Brocks 방법

객 : 객체 다이어그램

동 : 상태다이어그램 

기 : 자료흐름도

---

**디자인 패턴**
